src/controller.py:def move_to_processed(file_path):
src/controller.py:def process_file(file_path: str):
src/core_runner.py:def run_job_for_folder(folder_path: str):
src/core_runner.py:    def log(msg):
src/inputs/archiver.py:def archive_attachment(filepath):
src/inputs/attachment_processor.py:def process_attachments(attachment_paths):
src/inputs/csv_listener.py:    def process_csv(self, file_path):
src/inputs/csv_listener.py:    def on_created(self, event):
src/inputs/csv_listener.py:    def on_modified(self, event):
src/inputs/csv_listener.py:def start_csv_monitor():
src/inputs/email_listener.py:def connect_to_mailbox():
src/inputs/email_listener.py:def clean_old_attachments():
src/inputs/email_listener.py:def save_email_body(subject, body, sender):
src/inputs/email_listener.py:def save_attachment(part, filename, sender, subject):
src/inputs/email_listener.py:def fetch_and_process_emails(mail):
src/inputs/email_listener_runner.py:def process_email(email_data):
src/inputs/email_listener_runner.py:def main():
src/inputs/file_monitor.py:    def process_file(self, file_path):
src/inputs/file_monitor.py:    def on_created(self, event):
src/inputs/file_monitor.py:    def on_modified(self, event):
src/inputs/file_monitor.py:def get_new_files(folder_path):
src/inputs/file_monitor.py:def start_file_monitor():
src/inputs/file_parser.py:def extract_text_from_pdf(file_path):
src/inputs/file_parser.py:def extract_text_from_docx(file_path):
src/inputs/file_parser.py:def extract_tasks_from_excel(file_path):
src/inputs/file_parser.py:def parse_attachment(file_path):
src/job_loader.py:def load_jobs():
src/main.py:def main():
src/outputs/dashboard_viewer.py:def load_executed_logs():
src/outputs/dashboard_viewer.py:def style_result(result_text):
src/outputs/dashboard_viewer.py:def show_summary_stats(logs):
src/outputs/dashboard_viewer.py:def show_dashboard(logs, filter_mode=None, keyword_filter=None):
src/outputs/dashboard_viewer.py:def main():
src/outputs/email_sender.py:def send_email(sender_email, sender_password, recipient_email, subject, body):
src/outputs/export_manager.py:def passes_filters(task: dict) -> bool:
src/outputs/export_manager.py:def load_retry_queue():
src/outputs/export_manager.py:def save_retry_queue(queue):
src/outputs/export_manager.py:def add_to_retry_queue(task, target):
src/outputs/export_manager.py:def export_to_s3(task, target):
src/outputs/export_manager.py:def export_to_target(task, target):
src/outputs/export_manager.py:def export_to_targets(tasks, targets):
src/outputs/export_manager.py:def export_task(task: dict):
src/outputs/job_alerts.py:def load_alert_settings(config):
src/outputs/job_alerts.py:def send_slack_alert(webhook, message):
src/outputs/job_alerts.py:def send_email_alert(recipient, subject, body):
src/outputs/job_alerts.py:def maybe_alert_on_failure(config, failure_count, job_name):
src/outputs/log_manager.py:def log_task_result(task, result):
src/outputs/log_watcher.py:    def process_log(self, path):
src/outputs/log_watcher.py:    def on_created(self, event):
src/outputs/log_watcher.py:    def on_modified(self, event):
src/outputs/log_watcher.py:def start_log_watcher():
src/outputs/notion_exporter.py:def export_to_notion(task):
src/outputs/notion_exporter.py:def push_to_notion(database_id, tasks):
src/outputs/review_dashboard.py:def load_structured_logs():
src/outputs/review_dashboard.py:def has_been_executed(structured_name):
src/outputs/review_dashboard.py:def review_tasks(recheck_all=False):
src/outputs/sheets_exporter.py:def push_to_google_sheets(sheet_id, tasks, sheet_range="Sheet1!A1"):
src/outputs/sheets_exporter.py:def export_to_sheets(task):
src/processing/actions.py:def send_slack_message(recipient, message):
src/processing/actions.py:def update_crm_case(case_id, note):
src/processing/actions.py:def create_calendar_event(title, time_slot):
src/processing/actions.py:def email_supervisor(subject, message):
src/processing/actions.py:def fallback_action(description):
src/processing/actions.py:def create_jira_ticket(task_details):
src/processing/actions.py:def update_google_sheet(data):
src/processing/actions.py:def assign_task_in_clickup(task_info):
src/processing/actions.py:def email_hr(subject, body):
src/processing/actions.py:def create_calendar_event_flexible(details):
src/processing/csv_analyser.py:def analyse_csv(file_path):
src/processing/due_date_extractor.py:def extract_due_date(text):
src/processing/due_date_extractor.py:def normalize_natural_phrasing(text):
src/processing/due_date_extractor.py:def recognise_due_dates(tasks):
src/processing/email_responder.py:def generate_gpt_reply(email_body, openai_api_key):
src/processing/gpt_classifier.py:def classify_task_with_gpt(text: str) -> dict:
src/processing/structured_saver.py:def pick_template(summary_text, default_template="templates/sample_template.docx"):
src/processing/structured_saver.py:def save_structured_summary(summary_data, tasks, alerts, attachments=None, email_subject="No Subject", email_from="unknown@example.com"):
src/processing/summary_analyser.py:def analyse_summary(summary_text):
src/processing/summary_analyser.py:def summarise_file(filepath):
src/processing/summary_analyser.py:def tag_summary(summary_text: str) -> tuple[str, str]:
src/processing/task_executor.py:def execute_tasks_from_log(log_path):
src/processing/task_executor.py:def execute_task(task, source_file=None):
src/processing/task_executor.py:    def maybe_run(fn, *args, **kwargs):
src/processing/task_executor.py:def run_gpt_fallback(task_description, is_real):
src/processing/task_executor.py:def save_execution_result(result):
src/processing/task_executor.py:def execute_tasks(tasks):
src/processing/task_extractor.py:def extract_tasks(summary_text):
src/processing/template_filler.py:def fill_template(template_path, context, output_dir="generated_docs"):
src/processing/time_slot_parser.py:def extract_time_slot(text, priority=None):
src/processing/time_slot_parser.py:def normalize_time_phrasing(text):
src/processing/user_mapper.py:def resolve_assigned_user(raw_value):
src/processing/utils.py:def group_tasks_by_source(tasks):
